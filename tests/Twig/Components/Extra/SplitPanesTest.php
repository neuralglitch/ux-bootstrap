<?php

declare(strict_types=1);

namespace NeuralGlitch\UxBootstrap\Tests\Twig\Components\Extra;

use NeuralGlitch\UxBootstrap\Service\Bootstrap\Config;
use NeuralGlitch\UxBootstrap\Twig\Components\Extra\SplitPanes;
use PHPUnit\Framework\TestCase;

final class SplitPanesTest extends TestCase
{
    private Config $config;

    protected function setUp(): void
    {
        $this->config = new Config([
            'split_panes' => [
                'orientation' => 'horizontal',
                'initial_size' => '50%',
                'min_size' => '10%',
                'max_size' => '90%',
                'resizable' => true,
                'collapsible' => false,
                'persistent' => false,
                'divider_size' => 4,
                'snap_threshold' => 50,
                'collapsed' => null,
                'class' => null,
                'attr' => [],
            ],
        ]);
    }

    public function testDefaultOptions(): void
    {
        $component = new SplitPanes($this->config);
        $component->mount();
        $options = $component->options();

        $this->assertStringContainsString('split-panes', $options['containerClasses']);
        $this->assertStringContainsString('split-panes-horizontal', $options['containerClasses']);
        $this->assertStringContainsString('split-panes-resizable', $options['containerClasses']);
        $this->assertTrue($options['isHorizontal']);
        $this->assertSame(4, $options['dividerSize']);

        $this->assertIsArray($options);
    }

    public function testVerticalOrientation(): void
    {
        $component = new SplitPanes($this->config);
        $component->orientation = 'vertical';
        $component->mount();
        $options = $component->options();

        $this->assertStringContainsString('split-panes-vertical', $options['containerClasses']);
        $this->assertFalse($options['isHorizontal']);

        $this->assertIsArray($options);
    }

    public function testResizableOption(): void
    {
        $component = new SplitPanes($this->config);
        $component->resizable = true;
        $component->mount();
        $options = $component->options();

        $this->assertStringContainsString('split-panes-resizable', $options['containerClasses']);

        $this->assertIsArray($options);
    }

    public function testNonResizable(): void
    {
        $component = new SplitPanes($this->config);
        $component->resizable = false;
        $component->mount();
        $options = $component->options();

        $this->assertStringNotContainsString('split-panes-resizable', $options['containerClasses']);

        $this->assertIsArray($options);
    }

    public function testCollapsibleOption(): void
    {
        $component = new SplitPanes($this->config);
        $component->collapsible = true;
        $component->mount();
        $options = $component->options();

        $this->assertStringContainsString('split-panes-collapsible', $options['containerClasses']);

        $this->assertIsArray($options);
    }

    public function testPersistentOption(): void
    {
        $component = new SplitPanes($this->config);
        $component->persistent = true;
        $component->id = 'my-splitter';
        $component->mount();
        $options = $component->options();

        $this->assertSame('my-splitter', $options['attrs']['id']);

        $this->assertIsArray($options);
    }

    public function testAutoGeneratedIdForPersistent(): void
    {
        $component = new SplitPanes($this->config);
        $component->persistent = true;
        $component->mount();
        $options = $component->options();

        $this->assertArrayHasKey('id', $options['attrs']);
        $this->assertStringStartsWith('split-panes-', $options['attrs']['id']);
        $this->assertArrayHasKey('data-bs-split-panes-storage-key-value', $options['attrs']);

        $this->assertIsArray($options);
    }

    public function testInitialSize(): void
    {
        $component = new SplitPanes($this->config);
        $component->initialSize = '30%';
        $component->mount();
        $options = $component->options();


        $this->assertIsArray($options);
    }

    public function testMinMaxSizes(): void
    {
        $component = new SplitPanes($this->config);
        $component->minSize = '20%';
        $component->maxSize = '80%';
        $component->mount();
        $options = $component->options();


        $this->assertIsArray($options);
    }

    public function testDividerSize(): void
    {
        $component = new SplitPanes($this->config);
        $component->dividerSize = 8;
        $component->mount();
        $options = $component->options();

        $this->assertSame(8, $options['dividerSize']);

        $this->assertIsArray($options);
    }

    public function testSnapThreshold(): void
    {
        $component = new SplitPanes($this->config);
        $component->snapThreshold = 100;
        $component->mount();
        $options = $component->options();


        $this->assertIsArray($options);
    }

    public function testCollapsedFirstPane(): void
    {
        $component = new SplitPanes($this->config);
        $component->collapsed = 'first';
        $component->mount();
        $options = $component->options();


        $this->assertIsArray($options);
    }

    public function testCollapsedSecondPane(): void
    {
        $component = new SplitPanes($this->config);
        $component->collapsed = 'second';
        $component->mount();
        $options = $component->options();


        $this->assertIsArray($options);
    }

    public function testStimulusControllerData(): void
    {
        $component = new SplitPanes($this->config);
        $component->mount();
        $options = $component->options();

        $this->assertSame('bs-split_panes', $options['attrs']['data-controller']);

        $this->assertIsArray($options);
    }

    public function testCustomClasses(): void
    {
        $component = new SplitPanes($this->config);
        $component->class = 'custom-splitter my-class';
        $component->mount();
        $options = $component->options();

        $this->assertStringContainsString('custom-splitter', $options['containerClasses']);
        $this->assertStringContainsString('my-class', $options['containerClasses']);

        $this->assertIsArray($options);
    }

    public function testCustomAttributes(): void
    {
        $component = new SplitPanes($this->config);
        $component->attr = [
            'data-test' => 'split-panes',
            'aria-label' => 'Split view',
        ];
        $component->mount();
        $options = $component->options();

        $this->assertSame('split-panes', $options['attrs']['data-test']);
        $this->assertSame('Split view', $options['attrs']['aria-label']);

        $this->assertIsArray($options);
    }

    public function testConfigDefaultsApplied(): void
    {
        $customConfig = new Config([
            'split_panes' => [
                'orientation' => 'vertical',
                'initial_size' => '40%',
                'min_size' => '10%',
                'max_size' => '90%',
                'resizable' => false,
                'collapsible' => true,
                'persistent' => false,
                'divider_size' => 8,
                'snap_threshold' => 50,
                'collapsed' => null,
                'class' => 'config-class',
                'attr' => [],
            ],
        ]);

        $component = new SplitPanes($customConfig);
        $component->mount();
        $options = $component->options();

        $this->assertSame('vertical', $component->orientation);
        $this->assertSame('40%', $component->initialSize);
        $this->assertFalse($component->resizable);
        $this->assertTrue($component->collapsible);
        $this->assertSame(8, $component->dividerSize);
        $this->assertStringContainsString('config-class', $options['containerClasses']);

        $this->assertIsArray($options);
    }

    public function testGetComponentName(): void
    {
        $component = new SplitPanes($this->config);
        $reflection = new \ReflectionClass($component);
        $method = $reflection->getMethod('getComponentName');

        $this->assertSame('split_panes', $method->invoke($component));
    }

    public function testCombinedOptions(): void
    {
        $component = new SplitPanes($this->config);
        $component->orientation = 'vertical';
        $component->resizable = true;
        $component->collapsible = true;
        $component->persistent = true;
        $component->id = 'editor-split';
        $component->initialSize = '60%';
        $component->minSize = '30%';
        $component->maxSize = '70%';
        $component->dividerSize = 6;
        $component->mount();
        $options = $component->options();

        $this->assertStringContainsString('split-panes-vertical', $options['containerClasses']);
        $this->assertStringContainsString('split-panes-resizable', $options['containerClasses']);
        $this->assertStringContainsString('split-panes-collapsible', $options['containerClasses']);
        $this->assertFalse($options['isHorizontal']);
        $this->assertSame('editor-split', $options['attrs']['id']);

        $this->assertIsArray($options);
    }
}

